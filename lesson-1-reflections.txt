How did viewing a diff between two versions of a file help you see the bug that
was introduced?

It found a pattern variation between two texts code and displayed a juxtaposition of the different parts.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

By being able to compare old and new versions of codes and adjust them.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

The user created check-point/commits are meaningful! The right formula is « ONE COMMIT PER LOGICAL CHANGE » Git requires the user to supply a commit message each time a commit is created, which makes looking to old versions much more pleasant. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Because the different files are interrelated to each other as they produce 1 product together.

How can you use the commands git log and git diff to view the history of files?

First, clone the repository to your computer using GIT CLONE and the URL. Then, cd to the repository and type GIT LOG to display the commits of that history. To view the details of each commit, use GIT DIFF -U and COMMIT_1 COMMIT_2. You will be able to see how many lines were added and deleted in that commit (+ -).

How might using version control make you more confident to make changes that
could break something?

I will be able to locate the error more easily thanks to the git checkout command.

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
